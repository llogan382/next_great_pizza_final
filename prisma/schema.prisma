// schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// TODO: Update for a restaurant
model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model MenuItem {
  id      String  @id @default(cuid())
  item    Pizza[]
  price   Int
  Order   Order?  @relation(fields: [orderId], references: [id])
  orderId String?
}

model Pizza {
  id         String    @id @default(cuid())
  name       String
  toppings   String[]
  crust      String?
  MenuItem   MenuItem? @relation(fields: [menuItemId], references: [id])
  menuItemId String?
}

model Order {
  id              String     @id @default(cuid())
  menuItem        MenuItem[]
  quantity        Int
  totalOrderPrice Int
  customer        User?      @relation(fields: [customerId], references: [id])
  customerId      String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

enum UserRole {
  ADMIN
  USER
  EMPLOYEE
  MANAGER
}

model Role {
  id     String   @id @default(cuid())
  role   UserRole @default(USER)
  User   User?    @relation(fields: [userId], references: [id])
  userId String?
}

model Address {
  id      String  @id @default(cuid())
  street  String
  city    String
  state   String
  zip     String
  country String
  User    User?   @relation(fields: [userId], references: [id])
  userId  String?
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  phone         String?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  posts         Post[]
  accounts      Account[]
  sessions      Session[]
  roles         Role[]
  Order         Order[]
  address       Address[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
